/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TestTypeService } from "../testType.service";
import { TestTypeCreateInput } from "./TestTypeCreateInput";
import { TestType } from "./TestType";
import { TestTypeFindManyArgs } from "./TestTypeFindManyArgs";
import { TestTypeWhereUniqueInput } from "./TestTypeWhereUniqueInput";
import { TestTypeUpdateInput } from "./TestTypeUpdateInput";
import { MeasurementFindManyArgs } from "../../measurement/base/MeasurementFindManyArgs";
import { Measurement } from "../../measurement/base/Measurement";
import { MeasurementWhereUniqueInput } from "../../measurement/base/MeasurementWhereUniqueInput";

export class TestTypeControllerBase {
  constructor(protected readonly service: TestTypeService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TestType })
  @swagger.ApiBody({
    type: TestTypeCreateInput,
  })
  async createTestType(
    @common.Body() data: TestTypeCreateInput
  ): Promise<TestType> {
    return await this.service.createTestType({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TestType] })
  @ApiNestedQuery(TestTypeFindManyArgs)
  async testTypes(@common.Req() request: Request): Promise<TestType[]> {
    const args = plainToClass(TestTypeFindManyArgs, request.query);
    return this.service.testTypes({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TestType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async testType(
    @common.Param() params: TestTypeWhereUniqueInput
  ): Promise<TestType | null> {
    const result = await this.service.testType({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TestType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: TestTypeUpdateInput,
  })
  async updateTestType(
    @common.Param() params: TestTypeWhereUniqueInput,
    @common.Body() data: TestTypeUpdateInput
  ): Promise<TestType | null> {
    try {
      return await this.service.updateTestType({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TestType })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTestType(
    @common.Param() params: TestTypeWhereUniqueInput
  ): Promise<TestType | null> {
    try {
      return await this.service.deleteTestType({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/measurements")
  @ApiNestedQuery(MeasurementFindManyArgs)
  async findMeasurements(
    @common.Req() request: Request,
    @common.Param() params: TestTypeWhereUniqueInput
  ): Promise<Measurement[]> {
    const query = plainToClass(MeasurementFindManyArgs, request.query);
    const results = await this.service.findMeasurements(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        measuredAt: true,

        product: {
          select: {
            id: true,
          },
        },

        testType: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
        value: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/measurements")
  async connectMeasurements(
    @common.Param() params: TestTypeWhereUniqueInput,
    @common.Body() body: MeasurementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      measurements: {
        connect: body,
      },
    };
    await this.service.updateTestType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/measurements")
  async updateMeasurements(
    @common.Param() params: TestTypeWhereUniqueInput,
    @common.Body() body: MeasurementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      measurements: {
        set: body,
      },
    };
    await this.service.updateTestType({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/measurements")
  async disconnectMeasurements(
    @common.Param() params: TestTypeWhereUniqueInput,
    @common.Body() body: MeasurementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      measurements: {
        disconnect: body,
      },
    };
    await this.service.updateTestType({
      where: params,
      data,
      select: { id: true },
    });
  }
}
