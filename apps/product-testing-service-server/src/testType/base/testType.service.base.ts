/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  TestType as PrismaTestType,
  Measurement as PrismaMeasurement,
} from "@prisma/client";

export class TestTypeServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.TestTypeCountArgs, "select">): Promise<number> {
    return this.prisma.testType.count(args);
  }

  async testTypes<T extends Prisma.TestTypeFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestTypeFindManyArgs>
  ): Promise<PrismaTestType[]> {
    return this.prisma.testType.findMany<Prisma.TestTypeFindManyArgs>(args);
  }
  async testType<T extends Prisma.TestTypeFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestTypeFindUniqueArgs>
  ): Promise<PrismaTestType | null> {
    return this.prisma.testType.findUnique(args);
  }
  async createTestType<T extends Prisma.TestTypeCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestTypeCreateArgs>
  ): Promise<PrismaTestType> {
    return this.prisma.testType.create<T>(args);
  }
  async updateTestType<T extends Prisma.TestTypeUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestTypeUpdateArgs>
  ): Promise<PrismaTestType> {
    return this.prisma.testType.update<T>(args);
  }
  async deleteTestType<T extends Prisma.TestTypeDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TestTypeDeleteArgs>
  ): Promise<PrismaTestType> {
    return this.prisma.testType.delete(args);
  }

  async findMeasurements(
    parentId: string,
    args: Prisma.MeasurementFindManyArgs
  ): Promise<PrismaMeasurement[]> {
    return this.prisma.testType
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .measurements(args);
  }
}
